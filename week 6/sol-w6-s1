filter' :: (a -> Bool) -> [a] -> [a]
filter' _ [] = []
filter' p (x:xs)  
    | p x       = x : filter' p xs
    | otherwise = filter' p xs
	
------------------------------

qsort' :: (Ord a) => [a] -> [a]  
qsort' [] = []  
qsort' (x:xs) = smallerSorted ++ [x] ++ biggerSorted 
    where smallerSorted = qsort' (filter' (<x) xs)  
          biggerSorted = qsort' (filter' (>=x) xs)  
		  
------------------------------

largestDivisible :: (Integral a) => a  
largestDivisible = head (filter p [100000,99999..])  
    where p x = x `mod` 3829 == 0  
	
------------------------------

sumOddSquares = sum (takeWhile (<10000) (filter odd (map (^2) [1..])))

------------------------------
