foldr' :: (a -> b -> b) -> b -> [a] -> b
foldr' _ v [] = v
foldr' f v (x:xs) = f x (foldr' f v xs)

---------------------------

foldr1' :: (a -> a -> a) -> [a] -> a
foldr1' _ [x] = x
foldr1' f (x:xs) = f x (foldr1' f xs)

---------------------------

foldl' :: (a -> b -> a) -> a -> [b] -> a
foldl' f v [] = v
foldl' f v (x:xs) = foldl' f (f v x) xs

---------------------------

foldl1' :: (a -> a -> a) -> [a] -> a
foldl1' f [x] = x
foldl1' f (x:y:xs) = foldl1' f ((f x y):xs)

----foldl1 using foldl-----

foldl1'' :: (a -> a -> a) -> [a] -> a
foldl1'' f [x] = x
foldl1'' f (x:xs) = foldl' f x xs

---------------------------

count :: a -> Int -> Int
count x y = 1 + y

lengthr :: [a] -> Int
lengthr [] = 0
lengthr lst = foldr' (count) 0 lst 

---------------------------

countL :: Int -> a -> Int
countL x y = x + 1

lengthl :: [a] -> Int
lengthl [] = 0
lengthl lst = foldl' (countL) 0 lst 
